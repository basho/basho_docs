$versions = <%= YAML::load(File.open('data/versions.yml')).to_json %>

$ ->
  # construct an object that represents a
  # drop-down version list
  buildLists = (project, base_url, moved_ranges_obj)->
    lists = []
    for vs in ($versions[project] || [])
      firstInBlock = true
      for vsi in vs
        vsp = window.parseVersion(vsi)
        if window.inVersionRange(vsp, range)
          current = window.compareVersions(currentVersion, vsp) == 0
          vData = {active:true, firstInBlock:firstInBlock, current:current, href:"/#{project}/#{vsi}#{base_url}", text:vsi}

          for vr_link in moved_ranges_obj
            if window.inVersionRange(vsp, vr_link[0])
              vData.href = "/#{project}/#{vsi}#{vr_link[1]}"

          lists.unshift(vData)
        else
          lists.unshift({active:false, firstInBlock:firstInBlock, current:false, href:"#", text:vsi})
        firstInBlock = false
    lists


  return if $('.mainarticle .versions').length == 0

  project = $('meta[name=project]').attr('content')
  base_url = $('meta[name=base-url]').attr('content')
  version = $('meta[name=version]').attr('content')
  version_range = $('meta[name=version-range]').attr('content')
  moved_ranges = $('meta[name=moved-ranges]').attr('content')

  return unless project? || base_url? || version? || version_range?
  return if $versions[project]?.length <= 1

  $("body").addClass("ver-#{version.replace(/\./g, '-')}")

  currentVersion = window.parseVersion(version)
  range = window.parseVersionRange(version_range)

  moved_ranges_obj = []
  for r,link of $.parseJSON(moved_ranges)
    moved_ranges_obj.push [window.parseVersionRange(r), link]

  lists = buildLists(project, base_url, moved_ranges_obj)

  blockCount = 0
  firstInBlock = (li)->
    if li.firstInBlock
      blockCount++
      " first "
    else
      " "

  currentClass = (li)->
    classStr = ""
    unless li.active
      classStr = "inactive"
    else if li.current
        classStr = "current"
    " class=\"#{classStr} versions-#{blockCount}#{firstInBlock(li)}\""

  liLink = (li)->
    "<a class=\"versioned\" href=\"#{li.href}\">#{li.text.replace('pre', 'p')}</a>"

  output = ""
  output += "<div id=\"version-ddown-button\" class=\"unselected\">"
  output += "<div class=\"version-ddown-title\">Version</div>"
  output += "<div class=\"version-ddown-number\">"
  output += "#{version.replace('pre', 'p')}"
  output += "</div>"
  output += "<div class=\"version-ddown-arrow\"></div>"
  output += "</div>"
  output += "<ol id=\"version-list\">"
  for vmli in lists
    output += "<li#{currentClass(vmli)}>"
    output += liLink(vmli)
    output += "</li>"

  latestVersionStr = $versions.currents[project]
  latestVersion = window.parseVersion(latestVersionStr)
  pageToLatest = window.compareVersions(latestVersion, currentVersion)
  if pageToLatest != 0
    latestUrl = document.URL.replace("/#{version}/", "/#{latestVersionStr}/")
    short_version = version.replace(/(\d+\.\d+\.\d+)(.+)?/, "$1")
    if pageToLatest < 0
      halert_header = "This documentation is for an older version of Riak"
    else if pageToLatest > 0
      halert_header = "This documentation is for an unreleased version of Riak"
    halert =  "<div class=\"alert-version\" id=\"alert-version\">"
    halert += "<div class=\"arrow-left\"></div>"
    halert += "<div class=\"alert-version-message\">"
    halert += "<h4>#{halert_header}</h4>"
    halert += "<p><a href=\"#{latestUrl}\">"
    halert += "View the documentation for the latest version</a>"
    halert += "<span class=\"extra-alert-text\"> or select from the drop down on the left.</span>"
    halert += "</p></div><div class=\"version-icon-alert-version-num\">#{short_version}</div>"
    halert += "<meta content=\"#{version}\" itemprop=\"version\">"
    halert += "<div class=\"clear\"></div></div>"
    $('.mainarticle .versions').after(halert)

  $('.mainarticle .versions').html(output)

