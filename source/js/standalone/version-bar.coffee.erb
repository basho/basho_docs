$versions = <%= YAML::load(File.open('data/versions.yml')).to_json %>

unless window.infinity_version?
  window.infinity_version = {
    major: Infinity
    minor: Infinity
    patch: Infinity
  }

unless window.zeros_version?
  window.zeros_version = {
    major: 0
    minor: 0
    patch: 0
  }

unless window.parseVersion?
  window.parseVersion = (str)->
    v = /^[<>]?[=]?(\d+)\.?(\d+)?\.?(\d+)?/.exec(str)
    {
      major: parseInt(v[1]) || 0
      minor: parseInt(v[2]) || 0
      patch: parseInt(v[3]) || 0
    }

unless window.parseVersionRange?
  # X+, >=X, >X
  # X-, <=X, <X
  # X-Y
  window.parseVersionRange = (str)->
    # greater than or equal to
    if str.match(/\+$/) or str.match(/^\>\=/)
      return [window.parseVersion(str), window.infinity_version]
    # greater than
    if str.match(/^\>/)
      version = window.parseVersion(str)
      # don't include this version, so bump it up
      version.patch++
      return [version, window.infinity_version]
    # less than or equal to
    if str.match(/^\<\=/)
      return [window.zeros_version, window.parseVersion(str)]
    # less than
    if str.match(/\-$/) or str.match(/^\</)
      version = window.parseVersion(str)
      # don't include this version, so drop it down
      version.patch--
      return [window.zeros_version, version]
    if str.match(/.+?\-.+?/)
      vs = str.split('-')
      return [window.parseVersion(vs[0]), window.parseVersion(vs[1])]
    else
      version = window.parseVersion(str)
      return [version, version]

unless window.compareVersions?
  window.compareVersions = (v1, v2)->
    v1num = (v1.major * 10000) + (v1.minor * 100) + v1.patch
    v2num = (v2.major * 10000) + (v2.minor * 100) + v2.patch
    v2num - v1num

unless window.inVersionRange?
  # all comparisons are inclusive
  window.inVersionRange = (version, range)->
    # false if less than 0 or greater than 1
    return false if window.compareVersions(version, range[0]) > 0
    return false if window.compareVersions(version, range[1]) < 0
    true

unless window.pageInVersion?
  window.pageInVersion = (version)->
    pageVersionStr = $('meta[name=version]').attr('content')
    return false unless pageVersionStr?
    pageVersion = window.parseVersion(pageVersionStr)
    versionRange = window.parseVersionRange(version)
    window.inVersionRange(pageVersion, versionRange)

$ ->
  unless toggleMenu?
    toggleMenu = (buttonID, menuID)->
      c = $(buttonID).attr('class')
      if c == 'selected'
        $(menuID).hide()
        $(buttonID).attr('class', 'unselected')
      else
        $(menuID).show()
        $(buttonID).attr('class', 'selected')

  $('#version-ddown-button').live 'click', ->
    toggleMenu('#version-ddown-button', '#version-list')
    #toggleSelected('#version-ddown-title')
    #toggleSelected('#version-ddown-arrow')

  # Mouse click on sub menu or account link
  $('#version-list, #version-ddown-button').live 'mouseup', -> false

  $(document).live 'mouseup', ->
    $('#version-list').hide()
    $('#version-ddown-button').attr('class', 'unselected')

  # construct an object that represents a
  # drop-down version list
  buildLists = (project, base_url, moved_ranges_obj)->
    lists = []
    for vs in ($versions[project] || [])
      firstInBlock = true
      for vsi in vs
        vsp = window.parseVersion(vsi)
        if window.inVersionRange(vsp, range)
          current = window.compareVersions(currentVersion, vsp) == 0
          vData = {active:true, firstInBlock:firstInBlock, current:current, href:"/#{project}/#{vsi}#{base_url}", text:vsi}

          for vr_link in moved_ranges_obj
            if window.inVersionRange(vsp, vr_link[0])
              vData.href = "/#{project}/#{vsi}#{vr_link[1]}"

          lists.unshift(vData)
        else
          lists.unshift({active:false, firstInBlock:firstInBlock, current:false, href:"#", text:vsi})
        firstInBlock = false
    lists


  return if $('.mainarticle .versions').length == 0

  project = $('meta[name=project]').attr('content')
  base_url = $('meta[name=base-url]').attr('content')
  version = $('meta[name=version]').attr('content')
  version_range = $('meta[name=version-range]').attr('content')
  moved_ranges = $('meta[name=moved-ranges]').attr('content')

  return unless project? || base_url? || version? || version_range?
  return if $versions[project]?.length <= 1

  $("body").addClass("ver-#{version.replace(/\./g, '-')}")

  currentVersion = window.parseVersion(version)
  range = window.parseVersionRange(version_range)

  moved_ranges_obj = []
  for r,link of $.parseJSON(moved_ranges)
    moved_ranges_obj.push [window.parseVersionRange(r), link]

  lists = buildLists(project, base_url, moved_ranges_obj)

  blockCount = 0
  firstInBlock = (li)->
    if li.firstInBlock
      blockCount++
      " first "
    else
      " "

  currentClass = (li)->
    classStr = ""
    unless li.active
      classStr = "inactive"
    else if li.current
        classStr = "current"
    " class=\"#{classStr} versions-#{blockCount}#{firstInBlock(li)}\""

  liLink = (li)->
    "<a class=\"versioned\" href=\"#{li.href}\">#{li.text.replace('pre', 'p')}</a>"

  output = ""
  output += "<div id=\"version-ddown-button\" class=\"unselected\">"
  output += "<div class=\"version-ddown-title\">Version</div>"
  output += "<div class=\"version-ddown-number\">"
  output += "#{version.replace('pre', 'p')}"
  output += "</div>"
  output += "<div class=\"version-ddown-arrow\"></div>"
  output += "</div>"
  output += "<ol id=\"version-list\">"
  for vmli in lists
    output += "<li#{currentClass(vmli)}>"
    output += liLink(vmli)
    output += "</li>"

  latestVersionStr = $versions.currents[project]
  latestVersion = window.parseVersion(latestVersionStr)
  pageToLatest = window.compareVersions(latestVersion, currentVersion)
  if pageToLatest != 0
    latestUrl = document.URL.replace("/#{version}/", "/latest/")
    short_version = version.replace(/(\d+\.\d+\.\d+)(.+)?/, "$1")
    if pageToLatest < 0
      halert_header = "This documentation is for an older version of Riak"
    else if pageToLatest > 0
      halert_header = "This documentation is for an unreleased version of Riak"
    halert =  "<div class=\"alert-version\" id=\"alert-version\">"
    halert += "<div class=\"arrow-left\"></div>"
    halert += "<div class=\"alert-version-message\">"
    halert += "<h4>#{halert_header}</h4>"
    halert += "<p><a href=\"#{latestUrl}\">"
    halert += "View the documentation for the latest version</a>"
    halert += "<span class=\"extra-alert-text\"> or select from the drop down on the left.</span>"
    halert += "</p></div><div class=\"version-icon-alert-version-num\">#{short_version}</div>"
    halert += "<meta content=\"#{version}\" itemprop=\"version\">"
    halert += "<div class=\"clear\"></div></div>"
    $('.mainarticle .versions').after(halert)

  versions = $('.mainarticle .versions')
  if versions.is('div')
    versions.html(output)
  else
    new_versions = versions.first().before("<div class=versions />")
    versions.remove()
    new_versions.html(output)

