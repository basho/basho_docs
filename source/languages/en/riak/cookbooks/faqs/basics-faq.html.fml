---
title: Basic FAQs
project: riak
version: 1.2+
document: cookbook
audience: beginner
keywords: [faq, basics]
---

Q: What is Riak?
A:
  Riak is an open source, highly scalable, fault-tolerant distributed database. You can learn more by following the [Riak Fast Track](tutorials/fast-track/) tutorial.

Q: How do Riak and MongoDB compare?
A:
  For a full comparison, please see [[Riak Compared to MongoDB]].

Q: What does HTTP 204 "No Content" mean?
  When I do an HTTP Put, I get back a response of 204 "No Content". What does this mean?
A:
  In the HTTP standard a 204 No Content is returned when the request was successful but there is nothing to return other than HTTP headers.
  
  If you add `returnbody=true` in the PUT request, you will receive a `200 OK` and the content you just stored, otherwise you will receive a `204 No Content`.

Q: Is there a limit on how much data can be stored in Riak?
A:
  When using Bitcask, the default backend, there are 2 limiting factors when determining the amount of data a given Riak node can store. The first is the amount of memory on the node, and the second is the amount of disk space. Bitcask currently stores all of the keys, not the values, in memory to reference their location on disk, but the number of keys you can store will vary based on the size of the keys. There is a slight amount of overhead (40 bytes) to each key.
  
  We have a [[Cluster Capacity Planning]] document and a [[Bitcask Capacity Calculator]] to help plan for both factors.

Q: How does Riak control the growth of vector clocks?
A:
  Riak regularly prunes [[Vector Clocks]] based on four parameters which can be set per bucket. These parameters are:
  
  * small_vclock 
  * big_vclock 
  * young_vclock 
  * old_vclock
  
  To understand what these parameters do let's first review what a vector clock is. Vector clocks are a list of updates made per client id (`X-Riak-ClientId`). For example:
  
  ```erlang
  [{client1, 3},{client2, 1},{client3, 2}]
  ```
  
  The above vector clock would indicate that client1 updated the object 3 times, client2 updated the object 1 time, and client3 updated the object 2 times. Timestamp data is also stored in the vector clock but omitted from the example for simplicity.
  
  The `small_vclock` and `big_vclock` parameters refer to the length of the vclock list. If the length of the list is smaller than `small_vclock` it will not be pruned. If the length is greater than `big_vclock` it will be pruned.
  
  ![Vector Clock Pruning](/images/vclock-pruning.png)
  
  The `young_vclock` and `old_vclock` parameters refer to the timestamp per vclock entry. If the list length is between `small_vclock` and `big_vclock` the age of each entry is checked. If the entry is younger than `young_vclock` it is not pruned. If the entry is older than `old_vclock` than it is pruned.
  
  More aggressive vector clock pruning can be achieved by lowering the values of these four parameters.


Q: In what scenarios might data become corrupted in Riak?
A:
  Data corruption in Riak is very rare and will generally only happen because of a failure of the storage backend, or a physical hardware failure. The underlying storage engines have their own methods handling durability (except [[Memory]], that only lives in RAM.
  
  [[Bitcask]] uses an append-only file format that is immutable once written. Incomplete entries at the end of the file will be ignored.
  
  [[LevelDB]] has tunable durability and never write in place, instead appending to a log file or or merges existing files together to produce new ones. LevelDB recovery code uses checksums to detect this and will skip the incomplete records. You can also set `verify_checksums` to `true` forcing *all* data read from underlying storage to be verified against corresponding checksums.


Q: Are there are any speed tests for Riak?
A:
  Take a look at Basho's open source benchmarking tool, [[Basho Bench]] \(Make sure to bench it on your target platform).
