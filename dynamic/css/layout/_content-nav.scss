/**
 * Content Navigation
 * ==================
 * The Content Navigation element is a pretty complex piece of this site, so
 * this file may grow pretty large.
 * Note that this file relies on the below variables set in _wireframe.scss
 *  - $banner-height-sm-down
 *  - $banner-height-md-up
 *  - $content-nav-width-md
 *  - $content-nav-width-lg-up
 */

// Because of the way we're locking the .content-nav__fixed-top and
// .content-nav__fixed-bottom elements to the content-nav, we need pre-defined
// concrete sizes for both of them that can be used in numerous classes.
//TODO: This sizing looks like ass on sm-down screens. Gotta fix that.
$fixed-top-height-full : 7.5rem; // w/  project and version selectors.
$fixed-top-height-half : 4.0rem; // w/o project and version selectors.
$fixed-top-padding     : 0.5rem; // Padding to make the box-shadow look okay.

$fixed-bottom-height : 5rem;



/**
 * Content Navigation root element
 * PRESENTATION ONLY -- See _wireframe.scss for position and size.
 * 1. Full-sized fonts for interactive sizes.
 * 2. Reduced-sized fonts when sharing real estate on small-ish screens
 * 3. Closer to full-sized fonts when displaying on large screens.
 * 4. When JS is disabled, we will never be able to reach the Content Nav, so
 *    completely prevent rendering.
 *    TODO: Make sure screen readers don't pick up the visually hidden nav when
 *    js is enabled and it's in the unopened state.
 */
.content-nav {
  @extend %sans;
  background : $white;
  color      : $gray-50;

  @include width-exactly('xs') { font-size : 100%; } /* 1 */
  @include width-exactly('sm') { font-size : 100%; } /* 1 */
  @include width-exactly('md') { font-size :  80%; } /* 2 */
  @include width-exactly('lg') { font-size :  90%; } /* 3 */
  @include width-exactly('xl') { font-size :  90%; } /* 3 */

  @include when-inside('.no-js') {
    display : none !important;                       /* 4 */
  }
}



/**
 * Fixed element locked to the top of the Content Navigation.
 * 1. The height of this element will depend on which elements are present.
 */
.content-nav__fixed-top {
  position    : fixed;
  width       : inherit;
  padding-top : $fixed-top-padding;

  background : $gray-warm-97;
  box-shadow : 0.125rem 0 2rem -0.25rem $shadow-hard-color;

  @include when-inside('.content-nav--top-size-full') {
    height    : $fixed-top-height-full;  /* 1 */
  }
  @include when-inside('.content-nav--top-size-half') {
    height    : $fixed-top-height-half;  /* 1 */
  }
}



/**
 * Primary (dynamically sized) Content Navigation element
 * The __shadow-box element needs to wrap the __primary element s.t. the
 * scrollbar (which reacts primarily to the size of __menu-container) is locked
 * inside the __primary, rather offset to the limits of the box-shadow applied
 * to __shadow-box.
 * 1. Height of the __primary is determined entirely by the height of the
 *    __shadow-box
 * 2. Use relative positioning s.t. offsets (in this case `top`) are relative to
 *    the top/left of the parent .content-nav element.
 * 3. `height` is being set to 100% because we need to fill all available space
 *    provided by the root element. This is complicated b/c we are going to be
 *    setting `top` s.t. the __primary content is always rendered below the
 *    __fixed-top. This means we will have to "consume" some vertical height
 *    from the bottom of __primary s.t. child elements never be placed off the
 *    bottom of the screen. Because we're using `border-box` sizing, we can
 *    use `padding-bottom` to fill the off-screen space, setting it to the
 *    same value we're setting `top` to.
 * 4. The height of the __fixed-top will vary based on what's include in it, but
 *    that information should be recorded in --modifiers added to .content-nav.
 */
.content-nav__shadow-box {
  position : relative;  /* 2 */
  height   : 100%;      /* 3 */

  box-shadow : 0.25rem 0.25rem 4rem -0.5rem $shadow-hard-color;

  @include when-inside('.content-nav--top-size-full') {
    top            : $fixed-top-height-full + $fixed-top-padding;  /* 3, 4 */
    padding-bottom : $fixed-top-height-full + $fixed-top-padding;  /* 3, 4 */
  }
  @include when-inside('.content-nav--top-size-half') {
    top            : $fixed-top-height-half + $fixed-top-padding;  /* 3, 4 */
    padding-bottom : $fixed-top-height-half + $fixed-top-padding;  /* 3, 4 */
  }
}
.content-nav__primary {
  height : 100%;        /* 1 */
}



/**
 * Container for the dynamic menu and the items fixed to the bottom of the menu.
 * 1. We set `min-height` to 100% set s.t. this element will always flow to _at
 *    least_ the bottom of the window. The positioning of the fixed-bottom
 *    element relies on this, and we want to allow this element to expand as far
 *    down as will be necessary to display all .content-menu items.
 * 2. We need to set a padding-bottom equal to the height of the fixed bottom
 *    element s.t. the negative margin of that element (set to -1 * its height)
 *    won't result in any menu items being obscured. Margin collapse means no
 *    over-scrolling on that. Yeeey.
 */
.content-nav__menu-container {
  min-height     : 100%;                  /* 1 */
  padding-bottom : $fixed-bottom-height;  /* 2 */
}



/**
 * Lowest portion of the Content Nav, always fixed to the bottom of the window
 * or the bottom of the menu (whichever is farther down).
 * 1. The top margin is set to negative height **plus 1px** s.t. the
 *    `border-bottom` of the last item in the __menu-container is consumed by
 *    the top pixel of the fixed bottom (which we're assuming will be a border).
 */
.content-nav__fixed-bottom {
  margin-top : -1 * ($fixed-bottom-height + p2r(1px));  /* 1 */
  height     : $fixed-bottom-height;

  border-top : 1px solid $gray-85;
}
