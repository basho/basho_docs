/**
 * Basic Layouts
 * =============
 * This file may be a temporary. The intent is to keep it as minimal as possible
 * while still communicating the essentials of the wireframe layout of a primary
 * content page. Individual block layouts should be separated out into their own
 * layout/*.scss files if they're too large to quickly parse here. When that
 * should start happening is... yet to be determined. For now the rule of thumb
 * is that this file should only contain positional and sizing styles for top-
 * level block elements.
 */

// Styling Toggles
// ===============
// Toggle these to see what major changes in style will look like.
// Gonna make life kinda hard until we come to consensus, but that's half the
// point of this experiment. gl hf.


// Styling Variables
// =================
// SCSS variables used to determine the size of shared measurements.

// The banner is necessarily a reactive element, as should be the buffer between
// the bottom of the banner and the top of the primary content.
$banner-height-sm-down : 3.5rem;
$banner-buffer-sm-down : 0.5rem;
$banner-height-md-up   : 4.5rem;
$banner-buffer-md-up   : 0.5rem;

// Total padding at the top of the <article> (and above <h#> elements) to keep
// the .banner element from hiding text underneath it.
$article-padding-top-sm-down : $banner-height-sm-down + $banner-buffer-sm-down;
$article-padding-top-md-up   : $banner-height-md-up   + $banner-buffer-md-up;


// Width of the Content Navigation sidebar.
// No need to set a width for sm-down b/c the nav will take up the whole window.
$content-nav-width-md    : 14rem;
$content-nav-width-lg-up : 15rem;

// Padding on either side of the content nav when it's not full-screen'd.
$content-nav-padding-left   : 1.0rem;
$content-nav-padding-right  : 1.5rem;
$content-nav-padding-bottom : 2.0rem;



// Z-Indexes of layered elements
$banner-z-index      : 200;
$content-nav-z-index : 100;



/**
 * Content Navigation
 * POSITION & SIZE ONLY -- See _content-nav.scss for presentation.
 * NB. This element is expected to be .hidden-sm-down, but when JS is
 *     enabled, we will remove (or override?) that attribute to make it visible
 *     at all breakpoints.
 * 1. When we're in a smaller width, we want the content nav to start hidden,
 *    and reactively animate to fill the screen when we want it to be displayed.
 * 2. When we're in a wider width, we want the content nav to always be fixed to
 *    the left side of the screen.
 * 3. Setting a `top: X` and a `bottom: Y` let's us get around the rough edges
 *    of `height: 100%`. Should also work if we're not using `border-box` sizes.
 * 4. We start the content nav more than 100% of its width to the left so that
 *    we hide the box-shadow of its children.
 */
.content-nav {
  position : fixed;                          /* 1, 2 */
  z-index  : $content-nav-z-index;

  width  : 100%;
  top    : $banner-height-sm-down;           /* 3 */
  bottom : 0;                                /* 3 */

  left       : -200%;                        /* 1, 4 */
  transition : left 200ms ease-in-out 50ms;  /* 1 */

  @include narrow-from(sm) {
    &.content-nav--fullscreen {
      left : 0;                              /* 1 */
    }
  }

  @include wide-from(md) {
    top    : $banner-height-md-up;           /* 3 */
    bottom : $content-nav-padding-bottom;    /* 3 */
    left   : $content-nav-padding-left;      /* 2 */
    width  : $content-nav-width-md;
  }
  @include wide-from(lg) {
    width  : $content-nav-width-lg-up;
  }
}



/**
 * Banner
 * POSITION & SIZE ONLY -- See _banner.scss for presentation.
 * 1. Fill the width of the body. This will hopefully be the width of the
 *    screen, but the body content might push past that, and widen this as well.
 */
.banner {
  position : fixed;
  z-index  : $banner-z-index;
  top      : 0;
  left     : 0; /* 1 */
  right    : 0; /* 1 */
  height   : $banner-height-sm-down;

  @include wide-from(md) {
    left   : 0;
    height : $banner-height-md-up;
  }
}



/**
 * Content Well
 * This isn't strictly a visible component; it wraps the main article and
 * content-info footer s.t. transformations can be made that will affect those
 * elements similarly.
 * 1. Margins would be more descriptive for these spacings, but we don't want to
 *    modify the size of this element so, in keeping with `border-box`, we'll
 *    using paddings.
 * 2. Top padding is set s.t. the Banner element doesn't hide text.
 * 3. The Content Navigation is hidden until 'md' width, so we only have to set
 *    the left margin at that point.
 */
.content-well {
  width : 100%;

  padding-top : $article-padding-top-sm-down;        /* 1, 2 */

  @include wide-from(md) {
    padding-top   : $article-padding-top-md-up;      /* 1, 2 */
    padding-left  : ($content-nav-width-md
                     + $content-nav-padding-left
                     + $content-nav-padding-right);  /* 1, 3 */
    padding-right : 0.5rem;
  }
  @include wide-from(lg) {
    padding-left  : ($content-nav-width-lg-up
                     + $content-nav-padding-left
                     + $content-nav-padding-right);  /* 1, 3 */
    padding-right : 0.5rem;
  }

  &.content-well--immobile {
    @include narrow-from(sm) {
      position : fixed;
      overflow : hidden;
    }
  }
}



/**
 * Main Article
 */
.main-article {
  padding : 0  0.5rem 0  0.5rem;

/**
 * Headings within the Main Article
 * 1. We use a ::before pseudo element to insert an invisible block inside <h#>
 *    elements that will act as padding to prevent the banner from hiding text
 *    when we link to a given heading.
 * 2. Don't render any contents, but do render the block.
 * 3. I would have like to fill the contents with a description of this trick
 *    (and explicitly set the height to 0 to prevent that description from
 *    changing the height of the pseudo element), but I'm worried screen readers
 *    would pick up that text, which would be completely useless to them.
 * 4. By setting the margin-top to be the negative of the padding-top, we will
 *    add height to the parent element without moving it relative to its
 *    original position. This is what acts as the effective padding.
 * 5. Don't include the spacer pseudo-element on "special" titles;
 *     * Front Matter <h1> title
 *     * Table of Contents title
 */
  h1, h2, h3, h4, h5, h6 {
    &:before {             /* 1 */
      display    : block;  /* 1 */
      visibility : hidden; /* 2 */
      content    : " ";    /* 3 */
      height     : 0;      /* 3 */

      margin-top    : -$article-padding-top-sm-down; /* 4 */
      padding-top   :  $article-padding-top-sm-down; /* 4 */

      @include wide-from(md) {
        margin-top  : -$article-padding-top-md-up;   /* 4 */
        padding-top :  $article-padding-top-md-up;   /* 4 */
      }
    }
    &.front-matter__title:before,
    &.table-of-contents__title:before {              /* 5 */
      display : none;
    }
  }
}



/**
 * Content Footer
 * POSITION & SIZE ONLY -- See _content-info-footer.scss for presentation.
 */
.content-info {
}
