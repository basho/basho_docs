/**
 * Wrapper around the Selectors.
 */
.selectors {
  margin : 0.75rem 2rem 0  2rem;

  @include wide-from('md') {
    margin-left  : 0.25rem;
    margin-right : 0.25rem;
  }
}



/**
 * Selector; Title
 * 1. Setting line-height to 1 lets us exactly control the offsets and sizing.
 * 2. Poor-man's kerning. The `V` of VERSIONS looked like it was extending past
 *    the left edge of the button. Not actually the case, but it looks better now.
 */
.selector__title {
  @extend         %sans;
  font-size      : 60%;
  letter-spacing : p2r(2px);
  text-transform : uppercase;
  text-align     : left;

  line-height    : 1;         /* 1 */
  margin-bottom  : 0.3rem;

  padding-left   : p2r(1px);  /* 2 */
}

/**
 * Selector; Button
 * 1. Clear the default Button styles to flatten the element.
 * 2. Setting line-height to 1 lets us exactly control the offsets and size of
 *    the button element.
 * 3. X-padding will likely be ignored in favor of the total width, so these
 *    should be considered a mins.
 */
.selector__btn {
  @include rounded-corners(0.25rem);
  width            : 100%;
  line-height      : 1;                 /* 2 */
  padding          : 0.5rem 0.9rem;     /* 3 */
  background-color : $orange;

  @extend    %sans-bold;
  font-size : 120%;
  color     : $gray-95;

  border : none;                        /* 1 */
  @include on-event { outline: none; }  /* 1 */

  @include when-inside('.js') {
    cursor : pointer;
  }
}

/**
 * Selector; Downward Arrow
 * An example of the vertical-arrow mixin; downward-facing orange arrow used to
 * indicate a drop-down menu.
 */
.selector__arrow {
  @include downward-arrow(p2r(10px), $orange);
  position : relative;
  margin   : 0 0.2rem 0 auto;

  &.selector__arrow--open {
    @include upward-arrow(p2r(10px), $orange);
  }
}



/**
 * Selector Pane sizing (+ shadow) and primary elements
 * We use the sizing box to more correctly control scrolling, and to allow us to
 * overlay the inset box-shadow into.
 * We create the shadow as an ::after pseudo element for no particular reason.
 * It's important that the shadow is rendered above the __primary, but how we
 * accomplish that is immaterial.
 *
 * 1. Use relative positioning for the __sizing-box so the absolute positioning
 *    of the ::after element is relative to its parent.
 * 2. Apply a padding-left and padding-right to the selector-pane s.t.
 *    horizontal scrolling doesn't prematurely lose .sector-lists, and add a
 *    padding-top and padding-bottom to .selector-lists s.t. vertical scrolling
 *    doesn't prematurely lose .selector-list__elements.
 * 3. I'm not sure why, but whenever this element has children there's about
 *    4px of vertical scrolling (maybe I missed some whitespace somewhere?),
 *    even when the children are locked in at `height: 100%`. Explicitly setting
 *    vertical overflow to `hidden` is the forcible workaround, and prevents the
 *    vertical scrollbar from appearing.
 * 4. Because the ::after element covers the __primary, we need to allow event
 *    to pass through it.
 *    FIXME: This is not compatible with IE9, so we're going to have to get a
 *    polyfill for it. Maybe,
 *    https://github.com/kmewhort/pointer_events_polyfill
 */
.selector-pane__sizing-box {
  position : relative;      /* 1 */

  height   : 12rem;

  &.selector-pane__sizing-box--hidden {
    height : 0;
  }
  &.selector-pane__sizing-box--display-none {
    display : none;
  }

  &:after {
    box-shadow : inset 0  0  1rem -0.2rem $shadow-mid-color;

    pointer-events : none;  /* 4, FIXME */

    position : absolute;    /* 1 */
    top    : 0;
    left   : 0;
    height : 100%;
    width  : 100%;
    content : "";
  }
}
.selector-pane__primary {
  height : 100%;

  background : $gray-warm-97;
  color      : $gray-95;
  font-size  : 110%;
  padding-left  : 0.75rem;  /* 2 */
  padding-right : 0.75rem;  /* 2 */

  white-space : nowrap;

  overflow-y  : hidden;     /* 3 */
}




/**
 * Selector List
 * We wrap each .selector-list inside a __scroll-box s.t. the whitespace between
 * lists isn't wasted.
 * 1. Set height of the __scroll-box to 100% (to the height of the
 *    .selector-pane less padding) to ensure all lists are aligned to the top of
 *    the parent, and to allow vertical scrolling per list. This also the actual
 *    lists to be as tall as their children require.
 * 2. Apply a padding-left and padding-right to the selector-pane s.t.
 *    horizontal scrolling doesn't prematurely lose .sector-lists, and add a
 *    padding-top and padding-bottom to .selector-lists s.t. vertical scrolling
 *    doesn't prematurely lose .selector-list__elements.
 * 3. Add both padding-left and padding-right to ensure that the box-shadows
 *    have room to render correctly. rendered correctly. Give a negative
 *    margin-left to prevent the padding from affecting the positioning of the
 *    series elements. Provide a negative margin-right on the last series in the
 *    pane to ovoid over-scrolling in the .selector-pane.
 * 4. Clear default list styles.
 */
.selector-list__scroll-box {
  height : 100%;                  /* 1 */
  padding     : 0.75rem 0.75rem;  /* 2, 3 */
  margin-left : -0.75rem;         /* 3 */

  @include when-inside('.selector-pane__primary') {
    &:last-of-type {
      margin-right : -0.75rem;    /* 3 */
    }
  }
}
.selector-list {
  margin     : 0;     /* 4 */
  padding    : 0;     /* 4 */
  list-style : none;  /* 4 */

  box-shadow : 0  0  1rem -0.2rem $shadow-color;
}



/**
 * Selector list Elements
 * 1. Not actually a desired style. This will (hopefully) motivate us to clean
 *    up any background styles that aren't overridden in the below Per-Version
 *    Background Colors section.
 * 2. Width is locked (mostly; see #3), so the padding-left and -right is more
 *    of a fall-back.
 * 3. When the __element is an __element--archived, don't lock in the width.
 *    Allow the text, frills, and padding define the size of the element.
 */
.selector-list__element {
  background  : rgba(255,0,0,0.7); /* 1 */
  color       : $gray-95;
  text-align  : center;

  border-top : p2r(1px) solid $gray-85;

  transition  : background 400ms ease;

  a {
    @extend %sans-bold;
    width   : 4rem;            /* 2 */
    padding : 0.6rem 0.6rem;   /* 2 */
    color           : inherit; /* 4 */
    text-decoration : none;
  }

  &.selector-list__element--archived a {
    width : initial;           /* 3 */
  }
}

/**
 * Selector list Elements -- Top- and Bottom-most Elements
 */
.selector-list__element--opening {
  @include rounded-corner(top, left, 0.15rem);
  @include rounded-corner(top, right, 0.15rem);
  border-top : none;
}
.selector-list__element--closing {
  @include rounded-corner(bottom, left, 0.15rem);
  @include rounded-corner(bottom, right, 0.15rem);
}

/**
 * Selector list Elements -- Per-Version Background Colors
 */
.selector-list__element--1 {
  background                                     : $version-color-1;
  &.selector-list__element--current { background : $version-color-1-light; }
  @include on-event                 { background : $version-color-1-light; }
}
.selector-list__element--2 {
  background                                     : $version-color-2;
  &.selector-list__element--current { background : $version-color-2-light; }
  @include on-event                 { background : $version-color-2-light; }
}
.selector-list__element--3 {
  background                                     : $version-color-3;
  &.selector-list__element--current { background : $version-color-3-light; }
  @include on-event                 { background : $version-color-3-light; }
}
.selector-list__element--4 {
  background                                     : $version-color-4;
  &.selector-list__element--current { background : $version-color-4-light; }
  @include on-event                 { background : $version-color-4-light; }
}
.selector-list__element--5 {
  background                                     : $version-color-5;
  &.selector-list__element--current { background : $version-color-5-light; }
  @include on-event                 { background : $version-color-5-light; }
}
.selector-list__element--6 {
  background                                     : $version-color-6;
  &.selector-list__element--current { background : $version-color-6-light; }
  @include on-event                 { background : $version-color-6-light; }
}

/**
 * Selector list Elements -- Archived and Disabled Colors
 */
.selector-list__element--archived {
  color      : $white;
  background : $version-color-inactive;
  @include on-event {
    color      : $gray-95;
    background : $version-color-inactive-dark;
  }
}
.selector-list__element--disabled {
  background   : $version-color-inactive;
  border-color : lighten($version-color-inactive, 10%);
  color        : $white;
}

/**
 * Selector list Elements -- Current and Disabled Anchor Behavior
 */
.selector-list__element--current  a,
.selector-list__element--disabled a {
  pointer-events : none;    /* FIXME: Not IE9 compliant. */
  cursor         : default;
}
